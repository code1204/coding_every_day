### 贪心算法
#455. Assign Cookies          
def findContentChildren(g, s):
    # 先对g, s两个数组进行排序
    # 贪心思想1 优先满足需求因子较小的孩子。因为如果较小需求的孩子无法被满足，则之后的较大的需求更不可能能被满足了。
    #贪心思想2 尽量用较小的糖果去优先满足孩子。
    g.sort()
    s.sort()
    gi=0
    si=0
    while gi<len(g) and si<len(s):
        if g[gi]<=s[si]:
            gi+=1;
        #g=[1,2,3],s=[3]
        # output:1
        # you should give each child at most one cookie.Your goal is to maximize the number of your content children
        si+=1;#所以每次都要si+1，因为就算s[si]==3,也只能分给一个人，3是指一块饼干的size，不是指3块饼干
    
    return gi

#435. Non-overlapping Intervals
def eraseOverlapIntervals(intervals):
    cur_end, cnt = float('-inf'), 0
    #sorted:不会改变原数组，sort：会改变原数组
    #intervals.sort(key=lambda x:x[1])
    #sorted is faster than sort
    for s, e in sorted(intervals, key=lambda x: x[1]):
        print(s,e)
        #if 后面一个元素的start比这个元素的end大，更新end的值为后面一个元素的end
        if s >= cur_end: 
            cur_end = e
        else:#[2,3],[1,3]
            cnt += 1
    return cnt

#452. Minimum Number of Arrows to Burst Balloons
def findMinArrowShots(points):
    count=0
    cur_end=float('-inf')
    for start,end in sorted(points, key=lambda x:x[1]):
        if start>cur_end:#if this element's start>last elements' end, shoot a arrow, then the this element(ballon) is burst, update cur_end to this ballon's end
            count+=1
            cur_end=end
        # if in the range, do nothing  
        # else:
        #     continue
    return count
